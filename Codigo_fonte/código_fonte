#include <stdio.h>
#include <stdlib.h>
#include <locale.h>

struct tarefa{
	char descricao[100];
	char status;
};

struct tarefa tarefas[999];
int cont;

void CadastrarTarefa(){
	setlocale(LC_ALL,"");
	printf("Digite a descricao da tarefa:\n");
	fflush(stdin);
	gets(tarefas[cont].descricao);
	tarefas[cont].status = 'P';
	cont = cont + 1;
	printf("====================================\n");
	printf("\nTarefa registrado com sucesso!\n");
}

void ListarPendentes(){
	
	int i;
	int contpendente=0;
	
	setlocale(LC_ALL,"");
	
	printf("Listando tarefas pendentes!\n");
	printf("====================================\n");
	
	for(i=0; i<cont; i++){
		if(tarefas[i].status == 'P'){
			contpendente = contpendente+1;
			printf("Código da tarefa  %d\n", i);
			printf("Descrição: %s\n", tarefas[i].descricao);
			printf("====================================\n");
		}
	}
	if(contpendente==0){
		printf("Nenhuma tarefa pendente encontrada!\n");
		printf("====================================\n");
	}
}

void ListarConcluidas(){
	setlocale(LC_ALL,"");
	int i;
	int qtdconcluida=0;
	
	printf("Listando tarefas concluídas!\n");
	printf("====================================\n");
	
	for(i=0; i<cont; i++){
		if(tarefas[i].status == 'C'){
			qtdconcluida = qtdconcluida+1;
			printf("Código da tarefa  %d\n", i);
			printf("Descrição: %s\n", tarefas[i].descricao);
			printf("====================================\n");
		}
	}
	if(qtdconcluida == 0){
		printf("Nenhuma tarefa concluï¿½da encontrada!\n");
		printf("====================================\n");
	}
}

void AtualizarStatus(){
	setlocale(LC_ALL,"");
	
	int codigo = -1;
	
	 if(cont == 0){
        printf("====================================\n");
        printf("Não há registro de tarefa!\n");
        printf("====================================\n");
        return;
    }
	
	do{
	printf("Qual o código da tarefa concluída?\n");
	scanf("%d", &codigo);
	
	if(codigo >= cont){
		printf("\n====================================\n");
		printf("Tarefa número não encontrada, não foi possível atualizar!\n");
		ListarPendentes();	
		printf("====================================\n");	
		printf("\nDigite um código válido!\n");
		}else if(tarefas[codigo].status == 'C'){
			printf("\nStatus já atualizado anteriormente!\n");
		return;
		}
	}while(codigo >= cont);
	
	tarefas[codigo].status = 'C';
	
	printf("====================================\n");
	printf("\nStatus da tarefa %d modificado com sucesso!\n", codigo);

}

void MostrarPercentual(){
	int i;
	int qtdconcluida=0;
	float percentualconcluido;
	setlocale(LC_ALL,"");
	
    if(cont == 0){
        printf("====================================\n");
        printf("Não há registro de tarefa!\n");
        printf("====================================\n");
        return;
    }
	
	for(i=0; i<cont; i++){
		if(tarefas[i].status == 'C'){
			qtdconcluida = qtdconcluida + 1;
		}
	}	
	percentualconcluido = (qtdconcluida * 100) / cont;
	
	if(percentualconcluido==0){
		printf("====================================\n");
		printf("N]ao há tarefas concluídas!\n");
		printf("====================================\n");
	}else{
	printf("====================================\n");
	printf("No total são %d tarefas, e foram concluídas %d tarefas!\n", cont, qtdconcluida);
	printf("====================================\n");
	printf("As tarefas concluídas perfazem %.0f porcento do total de tarefas cadastradas!\n", percentualconcluido);
	printf("====================================\n");
	}	
}

int main(){
	
	setlocale(LC_ALL,"");
	
	int opcao;
	cont = 0;
	
	do{		
		printf("Bem-vindo ao programa To Do List!\n");
		printf("------------------------------------");
		printf("\n1 - Cadastrar nova tarefa\n");
		printf("2 - Atualizar Status\n");
		printf("3 - Listar tarefas pendentes\n");
		printf("4 - Listar tarefas concluídas\n");
		printf("5 - Mostrar percentual de tarefas concluídas\n");
		printf("6 - Sair\n");
		fflush(stdin);
		scanf("%d", &opcao);
		system("cls");
		
	
		switch(opcao){
			case 1:{
				CadastrarTarefa();
				system("pause");
				system("cls");
				break;
			} 
			case 2:{
				AtualizarStatus();
				system("pause");
				system("cls");
				break;
			} 
			case 3:{
				ListarPendentes();
				system("pause");
				system("cls");
				break;
			} 
			case 4:{
				ListarConcluidas();
				system("pause");
				system("cls");
				break;
			} 
			case 5:{
				MostrarPercentual();
				system("pause");
				system("cls");
				break;
			} 
			case 6:{
				printf("Saindo...");
				break;
			} 
			default:{
				system("cls");
				printf("Opção inválida, digite umas das opções fornecidas!\n");
				printf("\n------------------------------------------------------\n");
				system("pause");
				system("cls");
				break;
			}
		}
	
	}while(opcao != 6);
	
	return 0;
}